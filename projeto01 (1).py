# -*- coding: utf-8 -*-
"""Projeto01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12przZSqoKMyMa0PD1R20h9s_y40EUnVm
"""

import tracemalloc

tracemalloc.start()  # inicia a medição uma única vez no começo do programa

def monitoramento_memoria(mensagem):
    memoria_atual, memoria_pico = tracemalloc.get_traced_memory()
    print(f"[MEMÓRIA] {mensagem}: {memoria_atual} bytes (pico: {memoria_pico} bytes)")
    return memoria_atual

class Paciente:
  def __init__(self, nome, idade, prioridade):
    self.nome = nome
    self.idade = idade
    self.prioridade = prioridade
    self.proximo = None
    self.anterior = None

  def __str__(self):
    tipo = "P" if self.prioridade == 2 else "N"
    return f"{self.nome} ({tipo})"

class Fila:
  def __init__(self):
    self.inicio = None
    self.fim = None
    self.pacientes_p = 0
    self.pacientes_n = 0
    self.atende_normal = True


  def adicionar_paciente(self, nome, idade, prioridade):
        paciente = Paciente(nome, idade, prioridade)
        memoria_antes = monitoramento_memoria("Antes de adicionar o paciente")

        if not self.inicio:
            self.inicio = self.fim = paciente
        else:
            if prioridade == 2:
                atual = self.inicio
                while atual and atual.prioridade == 2:
                    atual = atual.proximo
                if not atual:
                    self.fim.proximo = paciente
                    paciente.anterior = self.fim
                    self.fim = paciente
                elif atual == self.inicio:
                    paciente.proximo = self.inicio
                    self.inicio.anterior = paciente
                    self.inicio = paciente
                else:
                    anterior = atual.anterior
                    paciente.proximo = atual
                    paciente.anterior = anterior
                    anterior.proximo = paciente
                    atual.anterior = paciente
            else:
                self.fim.proximo = paciente
                paciente.anterior = self.fim
                self.fim = paciente

        if prioridade == 2:
            self.pacientes_p += 1
        else:
            self.pacientes_n += 1

        memoria_depois = monitoramento_memoria("Depois de adicionar o paciente")
        print(f"[DIFERENÇA] {memoria_depois - memoria_antes} bytes\n")


  def remover_paciente(self):
        if not self.inicio:
            print("A fila está vazia. Não há pacientes para remover.")
            return None

        if self.pacientes_p > 0 and self.pacientes_n > 0:
            self.atende_normal = not self.atende_normal

        atual = self.inicio
        paciente_removido = None

        if self.atende_normal:
            while atual and atual.prioridade != 1:
                atual = atual.proximo
            if atual:
                paciente_removido = atual

        if not paciente_removido:
            paciente_removido = self.inicio

        memoria_antes = monitoramento_memoria("Antes de remover o paciente")

        if paciente_removido.anterior:
            paciente_removido.anterior.proximo = paciente_removido.proximo
        else:
            self.inicio = paciente_removido.proximo

        if paciente_removido.proximo:
            paciente_removido.proximo.anterior = paciente_removido.anterior
        else:
            self.fim = paciente_removido.anterior

        if paciente_removido.prioridade == 2:
            self.pacientes_p -= 1
        else:
            self.pacientes_n -= 1

        memoria_depois = monitoramento_memoria("Depois de remover o paciente")
        print(f"[DIFERENÇA] {memoria_depois - memoria_antes} bytes\n")
        print(f"Paciente {paciente_removido} foi atendido.\n")

        return paciente_removido


  def alterar_dados_paciente(self, nome, novo_nome = None, nova_idade = None, nova_prioridade = None):
        atual = self.inicio
        while atual:
            if atual.nome == nome:
                memoria_antes = monitoramento_memoria("Antes de alterar os dados do paciente")

                if novo_nome:
                    atual.nome = novo_nome
                if nova_idade:
                    atual.idade = nova_idade
                if nova_prioridade:
                    atual.prioridade = nova_prioridade

                memoria_depois = monitoramento_memoria("Depois de alterar os dados do paciente")
                print(f"[DIFERENÇA] {memoria_depois - memoria_antes} bytes\n")
                print(f"Paciente {nome} alterado com sucesso.\n")
                return

            atual = atual.proximo

        print(f"Paciente não encontrado na fila.\n")


  def exibir_fila(self):
        atual = self.inicio
        if not atual:
            print("A fila está vazia.")
            return

        while atual:
            print(f"[{atual}]", end='-->')
            atual = atual.proximo
        print("None")

  def exibir_fila_inversa(self):
      atual = self.fim
      if not atual:
          print("A fila está vazia.")
          return

      while atual:
          print(f"[{atual}]", end='-->')
          atual = atual.anterior
      print("None")

# EXEMPLIFICAÇÃO

fila = Fila()
pacientes_iniciais = [
    ("James", 30, 1),
    ("Mary", 25, 2),
    ("Pierre", 40, 1),
    ("Aurora", 63, 2),
    ("Mike", 21, 1),
    ("Alice", 18, 2),
    ("Ashley", 33, 1),
    ("David", 27, 1),
    ("Broke", 42, 1),
    ("Emily", 29, 2)
]

for nome, idade, prioridade in pacientes_iniciais:
    fila.adicionar_paciente(nome, idade, prioridade)

print("Fila inicial:")
fila.exibir_fila()
fila.exibir_fila_inversa()


# EXTRA


def modo_interativo(fila):
    print("\nModo interativo iniciado.")
    print("Comandos:")
    print("  add <nome> <idade> <P/N>")
    print("  assist (remover)")
    print("  edit <nome> <novo_nome> <nova_idade> <P/N>")
    print("  show")
    print("  showinv (mostrar invertido)")
    print("  exit (sair do modo interativo)\n")
    print("Exemplo de uso: add Fulano 38 N\n")

    while True:
        comando = input("Digite um comando: ").strip().split()
        if not comando:
            continue

        acao = comando[0].lower()

        if acao == "add" and len(comando) == 4:
            nome = comando[1]
            idade = int(comando[2])
            prioridade = 2 if comando[3].upper() == "P" else 1
            fila.adicionar_paciente(nome, idade, prioridade)

        elif acao == "assist":
            fila.remover_paciente()

        elif acao == "edit" and len(comando) == 5:
            nome = comando[1]
            novo_nome = comando[2]
            nova_idade = int(comando[3])
            nova_prioridade = 2 if comando[4].upper() == "P" else 1
            fila.alterar_dados_paciente(nome, novo_nome, nova_idade, nova_prioridade)

        elif acao == "show":
            fila.exibir_fila()

        elif acao == "showinv":
            fila.exibir_fila_inversa()

        elif acao == "exit":
            print("Saindo do modo interativo.")
            break

        else:
            print("Comando inválido. Tente novamente.")


modo_interativo(fila)

